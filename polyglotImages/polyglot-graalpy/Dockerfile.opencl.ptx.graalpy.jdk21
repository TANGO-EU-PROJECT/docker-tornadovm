FROM intel/oneapi-basekit

LABEL MAINTAINER Thanos Stratikopoulos <athanasios.stratikopoulos@manchester.ac.uk>

RUN apt-get update -q && apt-get install -qy \
        python3 build-essential vim git cmake maven openjdk-17-jdk python3-pip \
        python3-requests python3-tqdm python3-urllib3 python3-wget python3-psutil \
        wget && rm -rf /var/lib/apt/lists/*

RUN ln -s /usr/bin/python3 /usr/bin/python

## OpenCL configuration
RUN apt-get update && apt-get install -y clinfo opencl-headers
RUN ln -s /usr/lib/x86_64-linux-gnu/libOpenCL.so.1 /usr/lib/x86_64-linux-gnu/libOpenCL.so
ENV OpenCL_LIBRARY /usr/lib/x86_64-linux-gnu/libOpenCL.so.1

# Enable Nvidia OpenCL
RUN mkdir -p /etc/OpenCL/vendors && \
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

# Install dependency packages for CUDA installation
RUN apt-get update && apt-get install -y \
    gnupg \
    ca-certificates \
    curl

# Add NVIDIA package repositories
RUN curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb -o cuda-keyring.deb && \
    dpkg -i cuda-keyring.deb && \
    rm cuda-keyring.deb && \
    apt-get update

# Install CUDA
RUN apt-get install -y cuda-compiler-12-3
# Builder of the image must copy the shared library to be available at build time. You can check this path: /usr/lib/x86_64-linux-gnu/libnvidia-ml.so.1
COPY libnvidia-ml.so.1 /usr/lib/x86_64-linux-gnu/libnvidia-ml.so

# Set environment variables
ENV PATH=/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}

RUN java -version
RUN javac -version

ENV PATH /usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH
ENV JAVA_HOME /usr/lib/jvm/java-17-openjdk-amd64

# Install GraalPy
WORKDIR /graalpy-dev/
RUN git clone https://github.com/oracle/graal /graalpy-dev/graal && cd /graalpy-dev/graal && git checkout 5a21d6dd0051ff99f561d89dfc530d723edb3ab8
RUN git clone https://github.com/oracle/graalpython.git /graalpy-dev/graalpython && cd /graalpy-dev/graalpython && git checkout graal-23.1.0
WORKDIR /graalpy-dev/graalpython
RUN git clone https://github.com/graalvm/mx.git /graalpy-dev/graalpython/mx
RUN wget -O /tmp/labsjdk-ce-21.0.1+12-jvmci-23.1-b22-linux-amd64.tar.gz https://github.com/graalvm/labs-openjdk-21/releases/download/jvmci-23.1-b22/labsjdk-ce-21.0.1+12-jvmci-23.1-b22-linux-amd64.tar.gz
RUN mkdir -p /root/.mx/jdks/ \
    && tar xzvf /tmp/labsjdk-ce-21.0.1+12-jvmci-23.1-b22-linux-amd64.tar.gz --directory /root/.mx/jdks/
ENV MX_PYTHON_VERSION=3
WORKDIR /graalpy-dev/graalpython/
ENV JAVA_HOME=/root/.mx/jdks/labsjdk-ce-21.0.1-jvmci-23.1-b22
RUN mx/mx --dy /compiler python-gvm

## Install TornadoVM 
WORKDIR /tornado-dev/
RUN git clone https://github.com/TANGO-EU-PROJECT/TornadoVM.git tornado && cd tornado && git checkout feat/kmeans/compute
WORKDIR /tornado-dev/tornado
ENV CMAKE_ROOT=/usr
RUN ./bin/tornadovm-installer --jdk graal-jdk-21 --backend ptx,opencl --mvn_single_threaded 
SHELL ["/bin/bash", "-c", "source /tornado-dev/tornado/setvars.sh"]

## ENV-Variables Taken from the SOURCE.sh
ENV JAVA_HOME=/tornado-dev/tornado/etc/dependencies/TornadoVM-graal-jdk-21/graalvm-community-openjdk-21.0.1+12.1
ENV PATH=/tornado-dev/tornado/bin/bin:$PATH
ENV TORNADO_SDK=/tornado-dev/tornado/bin/sdk
ENV TORNADO_ROOT=/tornado-dev/tornado 
ENV GRAALPY_HOME=/graalpy-dev/graal/sdk/mxbuild/linux-amd64/GRAALVM_03DCD25EA1_JAVA21/graalvm-03dcd25ea1-java21-23.1.0-dev
ENV DOCKER_FPGA_EMULATION=1 

WORKDIR /data
VOLUME ["/data"]
